name: Publish Docker image


on:
  workflow_call:
    inputs:
      pkg-type:
        required: true
        type: string  # stable / nightly
    secrets:
      dockerhub-username:
        required: true
      dockerhub-password:
        required: true


env:
  DOCKER_IMAGE_NAME: balabit/syslog-ng


jobs:
  publish-docker-image:
    name: Publish syslog-ng Docker image
    if: github.repository_owner == 'syslog-ng'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout syslog-ng source
        uses: actions/checkout@v4


      - name: Set up Docker
        # Build and load multi-platform images
        # https://docs.docker.com/build/ci/github-actions/multi-platform/#build-and-load-multi-platform-images
        uses: docker/setup-docker-action@v4
        with:
          daemon-config: |
            {
              "debug": true,
              "features": {
                "containerd-snapshotter": true
              }
            }

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.dockerhub-username }}
          password: ${{ secrets.dockerhub-password }}

      - name: Extract metadata (syslog-ng version) for Docker
        if: inputs.pkg-type == 'stable'
        id: stable-tags
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.DOCKER_IMAGE_NAME }}
          tags: type=match,pattern=syslog-ng-(.*),group=1
          sep-tags: ','

      - name: Compose Docker image tags
        id: tags
        run: |
          if [[ '${{ inputs.pkg-type }}' = 'stable' ]]; then
            TAGS='${{ steps.stable-tags.outputs.tags }}'
          elif [[ '${{ inputs.pkg-type }}' = 'nightly' ]]; then
            TAGS="${DOCKER_IMAGE_NAME}:nightly"
          else
            echo Unexpected input: pkg-type=${{ inputs.pkg-type }}
            false
          fi

          # Split comma-separated tags into an array
          IFS=',' read -ra TAG_ARRAY <<< "$TAGS"

          # Determine cve_input
          if [[ ${#TAG_ARRAY[@]} -eq 1 ]]; then
            CVE_INPUT="${TAG_ARRAY[0]}"
          else
            CVE_INPUT=""
            for TAG in "${TAG_ARRAY[@]}"; do
              if [[ "$TAG" == *:latest ]]; then
                CVE_INPUT="$TAG"
                break
              fi
            done
          fi

          echo "TAGS=$TAGS"
          echo "CVE_INPUT=$CVE_INPUT"

          . .github/workflows/gh-tools.sh
          gh_output TAGS CVE_INPUT

      - name: Set up QEMU
        # Build and load multi-platform images
        # https://docs.docker.com/build/ci/github-actions/multi-platform/#build-and-load-multi-platform-images
        uses: docker/setup-qemu-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: docker/
          tags: ${{ steps.tags.outputs.TAGS }}
          platforms: linux/amd64,linux/arm64
          # TODO: Add proper build-args generation
          # This simple task is actually would require a pretty complex change, with a matrix strategy, and merging results of multiple generated images
          # See https://docs.docker.com/build/ci/github-actions/multi-platform/#distribute-build-across-multiple-runners
          # So, as we are lucky, and these required only once, and only in a RUN docker command that can be dynamic
          # now generating these in the Dockerfile
          #build-args: PKG_TYPE=${{ inputs.pkg-type }} CONTAINER_ARCH= CONTAINER_NAME_SUFFIX=
          build-args: PKG_TYPE=${{ inputs.pkg-type }}
          push: true

      - name: Scan docker image on CVEs (CRITICAL,HIGH to a sarif file) # https://aquasecurity.github.io/trivy/v0.54/docs/
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.tags.outputs.CVE_INPUT }}

          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

          # DO NOT break the build yet if an issue is detected
          #exit-code: '1'

      - name: Scan docker image on CVEs (ALL to a table)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.tags.outputs.CVE_INPUT }}

          format: 'table'
          dependency-tree: true
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
        env:
          # Use the most reliable and quicker AWS ECR location for trivy DBs
          TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db:2
          TRIVY_JAVA_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db:1

      - name: Upload Trivy scan sarif file results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
